******Binary search tree problem to find the type of Node:*******
Root, Leaf or Inner?
------------------------
select n as node,
case
 when p is null then 'Root'
 when n not in (select distinct(p) from BST where p is not null)  then 'Leaf' 
 else 'Inner'
end
from BST
order by n;
---------------------------------------------------------------------------------------------------------------------------------------------------------------
******Occupation Problem*********************************************
doctro, professor, actor, singer
--------------------------------------
select
min(if(occupation=Doctor, name, Null)) as Doctor,
min(if(occupation=Professor, name, Null)) as Professor,
min(if(occupation=Actor, name, Null)) as Actor,
min(if(occupation=singer, name, Null)) as Singer,

from
Select(name , occupation , row_number() over(partition by occupation order by name) as row_num from occupation) as name_order group by row_num
---------------------------------------------------------------------------------------------------------------------------------------------------------------
*************Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.*********
----------------------------------------------------------------
select Concat(Name , '(' , left(occupation,1), ')')
from occupation order by name;

select concat("There are a total of", count(occupation), " ", lower(occupation), "s.") from occupations group by occupation order by 
count(occupation), occupation;
-------------------------------------------------------------------------------------------------------------------------------------------------------------
********************median calculate************************

select round(lat_n,4) from (select row_number() over(order by lat_n asc) as rnk, lat_n from station) as a where rnk = (select round(count(lat_n)/2) from station)

-------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------
******Type of Triangle*********************
Equilateral
Isosceles
Scalane
Not a triangle
----------------------------------------------------------
SELECT 
    CASE 
    WHEN (A + B <= C) OR (A +C <= B) OR (B + C <= A) THEN 'Not A Triangle'
    WHEN (A=B) AND (B=C) THEN 'Equilateral' 
    WHEN (A<>B) AND (B<>C) AND (A<>C) THEN 'Scalene'
    WHEN ((A=B) AND (A<>C)) OR ((A=C) AND (A<>B)) OR ((B=C) AND (B<>A)) THEN 'Isosceles'
    END
FROM TRIANGLES;
--------------------------------------------------------------------------------------------------------------------------------------------------------------
************Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, 
total number of managers, and total number of employees. Order your output by ascending company_code.**************
--------------------------------------------------------------------
select  c.company_code , c.founder , 
count(distinct l.lead_manager_code), 
count(distinct s.senior_manager_code), 
count(distinct m.manager_code), 
count(distinct e.employee_code)

from  Company c left join Lead_Manager l 
on c.company_code=l.company_code
left join Senior_Manager s 
on l.company_code = s.company_code
left join Manager m 
on s.company_code = m.company_code
left join Employee e 
on m.company_code=e.company_code
group by c.company_code , c.founder
order by c.company_code;
------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Enter your query here.
*/
select
    case
        when grade < 8 then 'NULL'
        else
        name
    end, grade , marks
from students join grades on 
marks >= min_mark and
marks <= max_mark
order by grade desc,
name asc
-------------------------------------------------------------------------------------------------------------------------------------------------------
find the runner-up score

Sample Input 0

5
2 3 6 6 5
Sample Output 0

5
-----------------
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    mySet = set(arr)
    z = sorted(mySet)
    if (len(z) > 1):
        print(z[-2])
    else:
        print(z[0])
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
store them in a nested list and print the name(s) of any student(s) having the second lowest grade.

Note: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.
-----------------------------------------------------
if __name__ == '__main__':
    records = []
    scores = []

for _ in range(int(input())):
    name = input()
    score = float(input())
    scores.append(score)
    records.append([name, score])

scoresset = set(scores)

sec_min = sorted(scoresset)[1]
result = []
for record in records:
    if record[1] == sec_min:
        result.append(record[0])

result.sort()
for name in result:
    print(name)
------------------------------------------------------------------------------------------------------------------------
minion game
def minion_game(string):
    # your code goes here
    kevin_score = stuart_score = 0
    vow = "aeiouAEIOU"
    
    for i in range(0, len(string)):
        if (string[i] in vow):
            kevin_score += (len(string)-i)
        else:
            stuart_score += (len(string)-i)
    if (kevin_score > stuart_score):
        print("Kevin {}".format(kevin_score))
    elif (stuart_score > kevin_score):
        print("Stuart {}".format(stuart_score))
    else:
        print("Draw")
-----------------------------------------------------------------------------------------------------------------------------------------
